// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calculator.proto

package gen_go_connect

import (
	connect "connectrpc.com/connect"
	context "context"
	gen_go "dummy.mofu.dev/protos/gen_go"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalculatorName is the fully-qualified name of the Calculator service.
	CalculatorName = "Calculator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorAddProcedure is the fully-qualified name of the Calculator's Add RPC.
	CalculatorAddProcedure = "/Calculator/Add"
)

// CalculatorClient is a client for the Calculator service.
type CalculatorClient interface {
	Add(context.Context, *connect.Request[gen_go.AddRequest]) (*connect.Response[gen_go.AddResponse], error)
}

// NewCalculatorClient constructs a client for the Calculator service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalculatorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	calculatorMethods := gen_go.File_calculator_proto.Services().ByName("Calculator").Methods()
	return &calculatorClient{
		add: connect.NewClient[gen_go.AddRequest, gen_go.AddResponse](
			httpClient,
			baseURL+CalculatorAddProcedure,
			connect.WithSchema(calculatorMethods.ByName("Add")),
			connect.WithClientOptions(opts...),
		),
	}
}

// calculatorClient implements CalculatorClient.
type calculatorClient struct {
	add *connect.Client[gen_go.AddRequest, gen_go.AddResponse]
}

// Add calls Calculator.Add.
func (c *calculatorClient) Add(ctx context.Context, req *connect.Request[gen_go.AddRequest]) (*connect.Response[gen_go.AddResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// CalculatorHandler is an implementation of the Calculator service.
type CalculatorHandler interface {
	Add(context.Context, *connect.Request[gen_go.AddRequest]) (*connect.Response[gen_go.AddResponse], error)
}

// NewCalculatorHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorHandler(svc CalculatorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calculatorMethods := gen_go.File_calculator_proto.Services().ByName("Calculator").Methods()
	calculatorAddHandler := connect.NewUnaryHandler(
		CalculatorAddProcedure,
		svc.Add,
		connect.WithSchema(calculatorMethods.ByName("Add")),
		connect.WithHandlerOptions(opts...),
	)
	return "/Calculator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorAddProcedure:
			calculatorAddHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorHandler struct{}

func (UnimplementedCalculatorHandler) Add(context.Context, *connect.Request[gen_go.AddRequest]) (*connect.Response[gen_go.AddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("Calculator.Add is not implemented"))
}
